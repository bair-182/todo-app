{"ast":null,"code":"import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { appReducer } from './app-reducer';\nimport { authReducer } from \"../features/Login/authReducer\"; // объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\n\nconst rootReducer = combineReducers({\n  tasks: tasksReducer,\n  todolists: todolistsReducer,\n  app: appReducer,\n  auth: authReducer\n}); // непосредственно создаём store\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware)); // определить автоматически тип всего объекта состояния\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","map":{"version":3,"sources":["D:/it-incubator/REACT_TSX - Todolist15/src/app/store.ts"],"names":["tasksReducer","todolistsReducer","applyMiddleware","combineReducers","createStore","thunkMiddleware","appReducer","authReducer","rootReducer","tasks","todolists","app","auth","store","window"],"mappings":"AAAA,SAASA,YAAT,QAA6B,yCAA7B;AACA,SAASC,gBAAT,QAAiC,6CAAjC;AACA,SAASC,eAAT,EAA0BC,eAA1B,EAA2CC,WAA3C,QAA8D,OAA9D;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAAQC,WAAR,QAA0B,+BAA1B,C,CAEA;AACA;;AACA,MAAMC,WAAW,GAAGL,eAAe,CAAC;AAChCM,EAAAA,KAAK,EAAET,YADyB;AAEhCU,EAAAA,SAAS,EAAET,gBAFqB;AAGhCU,EAAAA,GAAG,EAAEL,UAH2B;AAIhCM,EAAAA,IAAI,EAAEL;AAJ0B,CAAD,CAAnC,C,CAMA;;AACA,OAAO,MAAMM,KAAK,GAAGT,WAAW,CAACI,WAAD,EAAcN,eAAe,CAACG,eAAD,CAA7B,CAAzB,C,CACP;;AAGA;AACA;AACAS,MAAM,CAACD,KAAP,GAAeA,KAAf","sourcesContent":["import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n"]},"metadata":{},"sourceType":"module"}