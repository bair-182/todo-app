{"ast":null,"code":"var _jsxFileName = \"D:\\\\it-incubator\\\\REACT_TSX - Todolist15\\\\src\\\\components\\\\ErrorSnackbar\\\\ErrorSnackbar.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport { useAppSelector } from \"../../app/store\";\nimport { setAppErrorAC } from \"../../app/app-reducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Alert = /*#__PURE__*/React.forwardRef(_c = function Alert(props, ref) {\n  return /*#__PURE__*/_jsxDEV(MuiAlert, {\n    elevation: 6,\n    ref: ref,\n    variant: \"filled\",\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 12\n  }, this);\n});\n_c2 = Alert;\nexport const ErrorSnackbar = () => {\n  _s();\n\n  const error = useAppSelector(state => state.app.error);\n\n  const handleClose = (event, reason) => dispatch => {\n    if (reason === 'clickaway') {\n      dispatch(setAppErrorAC('null'));\n    } // setOpen(false);\n\n\n    dispatch(setAppErrorAC('null'));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Snackbar, {\n    open: error !== null,\n    autoHideDuration: 6000,\n    onClose: handleClose,\n    children: /*#__PURE__*/_jsxDEV(Alert, {\n      onClose: handleClose,\n      severity: \"error\",\n      sx: {\n        width: '100%'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ErrorSnackbar, \"kgb5+h0hR+tLwihzyjLwCrA06OM=\", false, function () {\n  return [useAppSelector];\n});\n\n_c3 = ErrorSnackbar;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Alert$React.forwardRef\");\n$RefreshReg$(_c2, \"Alert\");\n$RefreshReg$(_c3, \"ErrorSnackbar\");","map":{"version":3,"sources":["D:/it-incubator/REACT_TSX - Todolist15/src/components/ErrorSnackbar/ErrorSnackbar.tsx"],"names":["React","Snackbar","MuiAlert","useAppSelector","setAppErrorAC","Alert","forwardRef","props","ref","ErrorSnackbar","error","state","app","handleClose","event","reason","dispatch","width"],"mappings":";;;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqC,qBAArC;AACA,SAAQC,cAAR,QAA6B,iBAA7B;AACA,SAAkCC,aAAlC,QAAsD,uBAAtD;;AAIA,MAAMC,KAAK,gBAAGL,KAAK,CAACM,UAAN,MAA6C,SAASD,KAAT,CACvDE,KADuD,EAChDC,GADgD,EAC3C;AACZ,sBAAO,QAAC,QAAD;AAAU,IAAA,SAAS,EAAE,CAArB;AAAwB,IAAA,GAAG,EAAEA,GAA7B;AAAkC,IAAA,OAAO,EAAC,QAA1C;AAAA,OAAuDD;AAAvD;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAHa,CAAd;MAAMF,K;AAKN,OAAO,MAAMI,aAAa,GAAG,MAAM;AAAA;;AAE/B,QAAMC,KAAK,GAAGP,cAAc,CAAqCQ,KAAK,IAAIA,KAAK,CAACC,GAAN,CAAUF,KAAxD,CAA5B;;AAGA,QAAMG,WAAW,GAAG,CAACC,KAAD,EAAuCC,MAAvC,KAA4DC,QAAD,IAAuB;AAClG,QAAID,MAAM,KAAK,WAAf,EAA4B;AACxBC,MAAAA,QAAQ,CAACZ,aAAa,CAAC,MAAD,CAAd,CAAR;AACH,KAHiG,CAIlG;;;AACAY,IAAAA,QAAQ,CAACZ,aAAa,CAAC,MAAD,CAAd,CAAR;AACH,GAND;;AAQA,sBACI,QAAC,QAAD;AAAU,IAAA,IAAI,EAAEM,KAAK,KAAK,IAA1B;AAAgC,IAAA,gBAAgB,EAAE,IAAlD;AAAwD,IAAA,OAAO,EAAEG,WAAjE;AAAA,2BACI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAEA,WAAhB;AAA6B,MAAA,QAAQ,EAAC,OAAtC;AAA8C,MAAA,EAAE,EAAE;AAACI,QAAAA,KAAK,EAAE;AAAR,OAAlD;AAAA,gBACKP;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CApBM;;GAAMD,a;UAEKN,c;;;MAFLM,a","sourcesContent":["import React, { useState } from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useAppSelector} from \"../../app/store\";\r\nimport {NullableRequestErrorType, setAppErrorAC} from \"../../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const error = useAppSelector< NullableRequestErrorType<string> >(state => state.app.error)\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => (dispatch: Dispatch)=> {\r\n        if (reason === 'clickaway') {\r\n            dispatch(setAppErrorAC('null'));\r\n        }\r\n        // setOpen(false);\r\n        dispatch(setAppErrorAC('null'))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose} >\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'} }>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}