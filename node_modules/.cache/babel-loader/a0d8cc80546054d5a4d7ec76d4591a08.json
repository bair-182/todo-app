{"ast":null,"code":"import { setAppErrorAC, setAppStatusAC } from '../app/app-reducer';\nexport const handleServerAppError = (data, dispatch) => {\n  if (data.messages.length) {\n    dispatch(setAppErrorAC(data.messages[0]));\n  } else {\n    dispatch(setAppErrorAC('Some error occurred'));\n  }\n\n  dispatch(setAppStatusAC('failed'));\n};\nexport const handleServerNetworkError = (error, dispatch) => {\n  dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'));\n  dispatch(setAppStatusAC('failed'));\n};","map":{"version":3,"sources":["C:/Users/blink/Documents/GitHub/todolist/src/utils/error-utils.ts"],"names":["setAppErrorAC","setAppStatusAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","error","message"],"mappings":"AAAA,SAAQA,aAAR,EAA8CC,cAA9C,QAA2F,oBAA3F;AAIA,OAAO,MAAMC,oBAAoB,GAAG,CAAIC,IAAJ,EAA2BC,QAA3B,KAAkG;AAClI,MAAID,IAAI,CAACE,QAAL,CAAcC,MAAlB,EAA0B;AACtBF,IAAAA,QAAQ,CAACJ,aAAa,CAACG,IAAI,CAACE,QAAL,CAAc,CAAd,CAAD,CAAd,CAAR;AACH,GAFD,MAEO;AACHD,IAAAA,QAAQ,CAACJ,aAAa,CAAC,qBAAD,CAAd,CAAR;AACH;;AACDI,EAAAA,QAAQ,CAACH,cAAc,CAAC,QAAD,CAAf,CAAR;AACH,CAPM;AASP,OAAO,MAAMM,wBAAwB,GAAG,CAACC,KAAD,EAA6BJ,QAA7B,KAAoG;AACxIA,EAAAA,QAAQ,CAACJ,aAAa,CAACQ,KAAK,CAACC,OAAN,GAAgBD,KAAK,CAACC,OAAtB,GAAgC,qBAAjC,CAAd,CAAR;AACAL,EAAAA,QAAQ,CAACH,cAAc,CAAC,QAAD,CAAf,CAAR;AACH,CAHM","sourcesContent":["import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}