{"ast":null,"code":"var _jsxFileName = \"D:\\\\it-incubator\\\\REACT_TSX - Todolist15\\\\src\\\\components\\\\ErrorSnackbar\\\\ErrorSnackbar.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setAppErrorAC } from '../../app/app-reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Alert = /*#__PURE__*/React.forwardRef(_c = function Alert(props, ref) {\n  return /*#__PURE__*/_jsxDEV(MuiAlert, {\n    elevation: 6,\n    ref: ref,\n    variant: \"filled\",\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 12\n  }, this);\n});\n_c2 = Alert;\nexport function ErrorSnackbar() {\n  _s();\n\n  const error = useSelector(state => state.app.error);\n  const dispatch = useDispatch();\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    dispatch(setAppErrorAC(null));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Snackbar, {\n    open: error !== null,\n    autoHideDuration: 6000,\n    onClose: handleClose,\n    children: /*#__PURE__*/_jsxDEV(Alert, {\n      onClose: handleClose,\n      severity: \"error\",\n      sx: {\n        width: '100%'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ErrorSnackbar, \"IFCBN2dY17DJ+bdSiLpe/gEmu4o=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c3 = ErrorSnackbar;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Alert$React.forwardRef\");\n$RefreshReg$(_c2, \"Alert\");\n$RefreshReg$(_c3, \"ErrorSnackbar\");","map":{"version":3,"sources":["D:/it-incubator/REACT_TSX - Todolist15/src/components/ErrorSnackbar/ErrorSnackbar.tsx"],"names":["React","Snackbar","MuiAlert","useDispatch","useSelector","setAppErrorAC","Alert","forwardRef","props","ref","ErrorSnackbar","error","state","app","dispatch","handleClose","event","reason","width"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqC,qBAArC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,aAAT,QAA8B,uBAA9B;;AAEA,MAAMC,KAAK,gBAAGN,KAAK,CAACO,UAAN,MAA6C,SAASD,KAAT,CACvDE,KADuD,EAChDC,GADgD,EAC3C;AACZ,sBAAO,QAAC,QAAD;AAAU,IAAA,SAAS,EAAE,CAArB;AAAwB,IAAA,GAAG,EAAEA,GAA7B;AAAkC,IAAA,OAAO,EAAC,QAA1C;AAAA,OAAuDD;AAAvD;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAHa,CAAd;MAAMF,K;AAMN,OAAO,SAASI,aAAT,GAAyB;AAAA;;AAE5B,QAAMC,KAAK,GAAGP,WAAW,CAAkCQ,KAAK,IAAIA,KAAK,CAACC,GAAN,CAAUF,KAArD,CAAzB;AAEA,QAAMG,QAAQ,GAAGX,WAAW,EAA5B;;AAEA,QAAMY,WAAW,GAAG,CAACC,KAAD,EAA+BC,MAA/B,KAAmD;AACnE,QAAIA,MAAM,KAAK,WAAf,EAA4B;AACxB;AACH;;AACDH,IAAAA,QAAQ,CAACT,aAAa,CAAC,IAAD,CAAd,CAAR;AACH,GALD;;AAOA,sBACI,QAAC,QAAD;AAAU,IAAA,IAAI,EAAEM,KAAK,KAAK,IAA1B;AAAgC,IAAA,gBAAgB,EAAE,IAAlD;AAAwD,IAAA,OAAO,EAAEI,WAAjE;AAAA,2BACI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAEA,WAAhB;AAA6B,MAAA,QAAQ,EAAC,OAAtC;AAA8C,MAAA,EAAE,EAAE;AAACG,QAAAA,KAAK,EAAE;AAAR,OAAlD;AAAA,gBACKP;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GApBeD,a;UAEEN,W,EAEGD,W;;;MAJLO,a","sourcesContent":["import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}