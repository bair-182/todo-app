{"ast":null,"code":"import { todolistsAPI } from '../../api/todolists-api';\nimport { setAppErrorAC, setAppStatusAC } from \"../../app/app-reducer\";\nconst initialState = [];\nexport const todolistsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'REMOVE-TODOLIST':\n      return state.filter(tl => tl.id !== action.id);\n\n    case 'ADD-TODOLIST':\n      return [{ ...action.todolist,\n        filter: 'all'\n      }, ...state];\n\n    case 'CHANGE-TODOLIST-TITLE':\n      return state.map(tl => tl.id === action.id ? { ...tl,\n        title: action.title\n      } : tl);\n\n    case 'CHANGE-TODOLIST-FILTER':\n      return state.map(tl => tl.id === action.id ? { ...tl,\n        filter: action.filter\n      } : tl);\n\n    case 'SET-TODOLISTS':\n      return action.todolists.map(tl => ({ ...tl,\n        filter: 'all'\n      }));\n\n    default:\n      return state;\n  }\n}; // actions\n\nexport const removeTodolistAC = id => ({\n  type: 'REMOVE-TODOLIST',\n  id\n});\nexport const addTodolistAC = todolist => ({\n  type: 'ADD-TODOLIST',\n  todolist\n});\nexport const changeTodolistTitleAC = (id, title) => ({\n  type: 'CHANGE-TODOLIST-TITLE',\n  id,\n  title\n});\nexport const changeTodolistFilterAC = (id, filter) => ({\n  type: 'CHANGE-TODOLIST-FILTER',\n  id,\n  filter\n});\nexport const setTodolistsAC = todolists => ({\n  type: 'SET-TODOLISTS',\n  todolists\n}); // thunks\n\nexport const fetchTodolistsTC = () => {\n  return dispatch => {\n    dispatch(setAppStatusAC('loading'));\n    todolistsAPI.getTodolists().then(res => {\n      dispatch(setTodolistsAC(res.data));\n      dispatch(setAppStatusAC('succeeded'));\n    });\n  };\n};\nexport const removeTodolistTC = todolistId => {\n  return dispatch => {\n    dispatch(setAppStatusAC('loading'));\n    todolistsAPI.deleteTodolist(todolistId).then(res => {\n      dispatch(removeTodolistAC(todolistId));\n      dispatch(setAppStatusAC('succeeded'));\n    });\n  };\n};\nexport const addTodolistTC = title => {\n  return dispatch => {\n    dispatch(setAppStatusAC('loading'));\n    todolistsAPI.createTodolist(title).then(res => {\n      if (res.data.resultCode === 0) {\n        dispatch(addTodolistAC(res.data.data.item));\n        dispatch(setAppStatusAC('succeeded'));\n      } else {\n        dispatch(setAppErrorAC(res.data.messages[0]));\n        dispatch(setAppStatusAC('failed'));\n      }\n    });\n  };\n};\nexport const changeTodolistTitleTC = (id, title) => {\n  return dispatch => {\n    dispatch(setAppStatusAC('loading'));\n    todolistsAPI.updateTodolist(id, title).then(res => {\n      dispatch(changeTodolistTitleAC(id, title));\n      dispatch(setAppStatusAC('succeeded'));\n    });\n  };\n}; // types","map":{"version":3,"sources":["D:/it-incubator/REACT_TSX - Todolist15/src/features/TodolistsList/todolists-reducer.ts"],"names":["todolistsAPI","setAppErrorAC","setAppStatusAC","initialState","todolistsReducer","state","action","type","filter","tl","id","todolist","map","title","todolists","removeTodolistAC","addTodolistAC","changeTodolistTitleAC","changeTodolistFilterAC","setTodolistsAC","fetchTodolistsTC","dispatch","getTodolists","then","res","data","removeTodolistTC","todolistId","deleteTodolist","addTodolistTC","createTodolist","resultCode","item","messages","changeTodolistTitleTC","updateTodolist"],"mappings":"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","sourcesContent":["import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppActionsType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0 ) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | AppActionsType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n"]},"metadata":{},"sourceType":"module"}