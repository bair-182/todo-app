{"ast":null,"code":"import { authAPI } from \"../api/todolists-api\";\nimport { handleServerAppError, handleServerNetworkError } from \"../utils/error-utils\";\nimport { setIsLoggedInAC } from \"../features/Login/authReducer\";\nconst initialState = {\n  status: 'idle',\n  error: null\n};\nexport const appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'APP/SET-STATUS':\n      return { ...state,\n        status: action.status\n      };\n\n    case 'APP/SET-ERROR':\n      return { ...state,\n        error: action.error\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\nexport const initializeAppTC = () => dispatch => {\n  dispatch(setAppStatusAC('loading'));\n  authAPI.authMe().then(res => {\n    if (res.data.resultCode === 0) {\n      dispatch(setIsLoggedInAC(true));\n      dispatch(setAppStatusAC('succeeded'));\n    } else {\n      handleServerAppError(res.data, dispatch);\n    }\n  }).catch(error => {\n    handleServerNetworkError(error, dispatch);\n  });\n};\nexport const setAppErrorAC = error => ({\n  type: 'APP/SET-ERROR',\n  error\n});\nexport const setAppStatusAC = status => ({\n  type: 'APP/SET-STATUS',\n  status\n});","map":{"version":3,"sources":["D:/it-incubator/REACT_TSX - Todolist15/src/app/app-reducer.ts"],"names":["authAPI","handleServerAppError","handleServerNetworkError","setIsLoggedInAC","initialState","status","error","appReducer","state","action","type","initializeAppTC","dispatch","setAppStatusAC","authMe","then","res","data","resultCode","catch","setAppErrorAC"],"mappings":"AACA,SAAQA,OAAR,QAAsB,sBAAtB;AACA,SAAQC,oBAAR,EAA8BC,wBAA9B,QAA6D,sBAA7D;AACA,SAAuBC,eAAvB,QAA6C,+BAA7C;AAEA,MAAMC,YAA8B,GAAG;AACnCC,EAAAA,MAAM,EAAE,MAD2B;AAEnCC,EAAAA,KAAK,EAAE;AAF4B,CAAvC;AAKA,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAuB,GAAGJ,YAA3B,EAAyCK,MAAzC,KAAmF;AACzG,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,gBAAL;AACI,aAAO,EAAC,GAAGF,KAAJ;AAAWH,QAAAA,MAAM,EAAEI,MAAM,CAACJ;AAA1B,OAAP;;AACJ,SAAK,eAAL;AACI,aAAO,EAAC,GAAGG,KAAJ;AAAWF,QAAAA,KAAK,EAAEG,MAAM,CAACH;AAAzB,OAAP;;AACJ;AACI,aAAO,EAAC,GAAGE;AAAJ,OAAP;AANR;AAQH,CATM;AAmBP,OAAO,MAAMG,eAAe,GAAG,MAAOC,QAAD,IAAqC;AACtEA,EAAAA,QAAQ,CAACC,cAAc,CAAC,SAAD,CAAf,CAAR;AACAb,EAAAA,OAAO,CAACc,MAAR,GACKC,IADL,CACUC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACC,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3BN,MAAAA,QAAQ,CAACT,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAS,MAAAA,QAAQ,CAACC,cAAc,CAAC,WAAD,CAAf,CAAR;AACH,KAHD,MAGO;AACHZ,MAAAA,oBAAoB,CAACe,GAAG,CAACC,IAAL,EAAWL,QAAX,CAApB;AACH;AACJ,GARL,EASKO,KATL,CASYb,KAAD,IAAW;AACdJ,IAAAA,wBAAwB,CAACI,KAAD,EAAQM,QAAR,CAAxB;AACH,GAXL;AAYH,CAdM;AAgBP,OAAO,MAAMQ,aAAa,GAAId,KAAD,KAA2B;AAACI,EAAAA,IAAI,EAAE,eAAP;AAAwBJ,EAAAA;AAAxB,CAA3B,CAAtB;AACP,OAAO,MAAMO,cAAc,GAAIR,MAAD,KAAgC;AAACK,EAAAA,IAAI,EAAE,gBAAP;AAAyBL,EAAAA;AAAzB,CAAhC,CAAvB","sourcesContent":["import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {SetIsLoggedIn, setIsLoggedInAC} from \"../features/Login/authReducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.authMe()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n| SetIsLoggedIn\r\n"]},"metadata":{},"sourceType":"module"}