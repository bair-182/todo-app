{"ast":null,"code":"var _jsxFileName = \"D:\\\\it-incubator\\\\REACT_TSX - Todolist15\\\\src\\\\features\\\\TodolistsList\\\\Todolist\\\\Task\\\\Task.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan';\nimport { Delete } from '@mui/icons-material';\nimport IconButton from '@mui/material/IconButton';\nimport Checkbox from '@mui/material/Checkbox';\nimport { TaskStatuses } from '../../../../api/todolists-api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Task = /*#__PURE__*/React.memo(_c = _s(props => {\n  _s();\n\n  const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\n  const onChangeHandler = useCallback(e => {\n    let newIsDoneValue = e.currentTarget.checked;\n    props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId);\n  }, [props.task.id, props.todolistId]);\n  const onTitleChangeHandler = useCallback(newValue => {\n    props.changeTaskTitle(props.task.id, newValue, props.todolistId);\n  }, [props.task.id, props.todolistId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: props.task.status === TaskStatuses.Completed ? 'is-done' : '',\n    children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n      checked: props.task.status === TaskStatuses.Completed,\n      color: \"primary\",\n      onChange: onChangeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(EditableSpan, {\n      value: props.task.title,\n      onChange: onTitleChangeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n      onClick: onClickHandler,\n      children: /*#__PURE__*/_jsxDEV(Delete, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, props.task.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 12\n  }, this);\n}, \"+OD6Wk4O9ON/9eoXnvWVsOXIpCI=\"));\n_c2 = Task;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Task$React.memo\");\n$RefreshReg$(_c2, \"Task\");","map":{"version":3,"sources":["D:/it-incubator/REACT_TSX - Todolist15/src/features/TodolistsList/Todolist/Task/Task.tsx"],"names":["React","useCallback","EditableSpan","Delete","IconButton","Checkbox","TaskStatuses","Task","memo","props","onClickHandler","removeTask","task","id","todolistId","onChangeHandler","e","newIsDoneValue","currentTarget","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","status","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAA4BC,WAA5B,QAA8C,OAA9C;AACA,SAAQC,YAAR,QAA2B,kDAA3B;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAAQC,YAAR,QAAqC,+BAArC;;AASA,OAAO,MAAMC,IAAI,gBAAGP,KAAK,CAACQ,IAAN,SAAYC,KAAD,IAA0B;AAAA;;AACrD,QAAMC,cAAc,GAAGT,WAAW,CAAC,MAAMQ,KAAK,CAACE,UAAN,CAAiBF,KAAK,CAACG,IAAN,CAAWC,EAA5B,EAAgCJ,KAAK,CAACK,UAAtC,CAAP,EAA0D,CAACL,KAAK,CAACG,IAAN,CAAWC,EAAZ,EAAgBJ,KAAK,CAACK,UAAtB,CAA1D,CAAlC;AAEA,QAAMC,eAAe,GAAGd,WAAW,CAAEe,CAAD,IAAsC;AACtE,QAAIC,cAAc,GAAGD,CAAC,CAACE,aAAF,CAAgBC,OAArC;AACAV,IAAAA,KAAK,CAACW,gBAAN,CAAuBX,KAAK,CAACG,IAAN,CAAWC,EAAlC,EAAsCI,cAAc,GAAGX,YAAY,CAACe,SAAhB,GAA4Bf,YAAY,CAACgB,GAA7F,EAAkGb,KAAK,CAACK,UAAxG;AACH,GAHkC,EAGhC,CAACL,KAAK,CAACG,IAAN,CAAWC,EAAZ,EAAgBJ,KAAK,CAACK,UAAtB,CAHgC,CAAnC;AAKA,QAAMS,oBAAoB,GAAGtB,WAAW,CAAEuB,QAAD,IAAsB;AAC3Df,IAAAA,KAAK,CAACgB,eAAN,CAAsBhB,KAAK,CAACG,IAAN,CAAWC,EAAjC,EAAqCW,QAArC,EAA+Cf,KAAK,CAACK,UAArD;AACH,GAFuC,EAErC,CAACL,KAAK,CAACG,IAAN,CAAWC,EAAZ,EAAgBJ,KAAK,CAACK,UAAtB,CAFqC,CAAxC;AAIA,sBAAO;AAAyB,IAAA,SAAS,EAAEL,KAAK,CAACG,IAAN,CAAWc,MAAX,KAAsBpB,YAAY,CAACe,SAAnC,GAA+C,SAA/C,GAA2D,EAA/F;AAAA,4BACH,QAAC,QAAD;AACI,MAAA,OAAO,EAAEZ,KAAK,CAACG,IAAN,CAAWc,MAAX,KAAsBpB,YAAY,CAACe,SADhD;AAEI,MAAA,KAAK,EAAC,SAFV;AAGI,MAAA,QAAQ,EAAEN;AAHd;AAAA;AAAA;AAAA;AAAA,YADG,eAOH,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEN,KAAK,CAACG,IAAN,CAAWe,KAAhC;AAAuC,MAAA,QAAQ,EAAEJ;AAAjD;AAAA;AAAA;AAAA;AAAA,YAPG,eAQH,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEb,cAArB;AAAA,6BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YARG;AAAA,KAAUD,KAAK,CAACG,IAAN,CAAWC,EAArB;AAAA;AAAA;AAAA;AAAA,UAAP;AAYH,CAxBmB,kCAAb;MAAMN,I","sourcesContent":["import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n"]},"metadata":{},"sourceType":"module"}