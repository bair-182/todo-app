{"ast":null,"code":"import { setAppStatusAC } from '../../app/app-reducer';\nimport { authAPI } from \"../../api/todolists-api\";\nimport { handleServerAppError, handleServerNetworkError } from \"../../utils/error-utils\";\nconst initialState = {\n  isLoggedIn: false\n};\nexport const authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'login/SET-IS-LOGGED-IN':\n      return { ...state,\n        isLoggedIn: action.value\n      };\n\n    default:\n      return state;\n  }\n}; // actions\n\nexport const setIsLoggedInAC = value => ({\n  type: 'login/SET-IS-LOGGED-IN',\n  value\n}); // thunks\n\nexport const loginTC = data => dispatch => {\n  dispatch(setAppStatusAC('loading'));\n  authAPI.login(data).then(res => {\n    if (res.data.resultCode === 0) {\n      dispatch(setIsLoggedInAC(true));\n      dispatch(setAppStatusAC('succeeded'));\n    } else {\n      handleServerAppError(res.data, dispatch);\n    }\n  }).catch(error => {\n    handleServerNetworkError(error, dispatch);\n  });\n};\nexport const initializeAppTC = () => dispatch => {\n  dispatch(setAppStatusAC('loading'));\n  authAPI.authMe().then(res => {\n    if (res.data.resultCode === 0) {\n      dispatch(setIsLoggedInAC(true));\n      dispatch(setAppStatusAC('succeeded'));\n    } else {\n      handleServerAppError(res.data, dispatch);\n    }\n  }).catch(error => {\n    handleServerNetworkError(error, dispatch);\n  });\n}; // types","map":{"version":3,"sources":["D:/it-incubator/REACT_TSX - Todolist15/src/features/Login/authReducer.ts"],"names":["setAppStatusAC","authAPI","handleServerAppError","handleServerNetworkError","initialState","isLoggedIn","authReducer","state","action","type","value","setIsLoggedInAC","loginTC","data","dispatch","login","then","res","resultCode","catch","error","initializeAppTC","authMe"],"mappings":"AACA,SAAgCA,cAAhC,QAA8E,uBAA9E;AACA,SAASC,OAAT,QAAyC,yBAAzC;AACA,SAAQC,oBAAR,EAA8BC,wBAA9B,QAA6D,yBAA7D;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE;AADK,CAArB;AAKA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAuB,GAAGH,YAA3B,EAAyCI,MAAzC,KAAmF;AAC1G,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,wBAAL;AACI,aAAO,EAAC,GAAGF,KAAJ;AAAWF,QAAAA,UAAU,EAAEG,MAAM,CAACE;AAA9B,OAAP;;AAEJ;AACI,aAAOH,KAAP;AALR;AAOH,CARM,C,CAUP;;AACA,OAAO,MAAMI,eAAe,GAAID,KAAD,KAAqB;AAACD,EAAAA,IAAI,EAAE,wBAAP;AAAiCC,EAAAA;AAAjC,CAArB,CAAxB,C,CAGP;;AACA,OAAO,MAAME,OAAO,GAAIC,IAAD,IAA4BC,QAAD,IAAqC;AACnFA,EAAAA,QAAQ,CAACd,cAAc,CAAC,SAAD,CAAf,CAAR;AACAC,EAAAA,OAAO,CAACc,KAAR,CAAcF,IAAd,EACKG,IADL,CACUC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACJ,IAAJ,CAASK,UAAT,KAAwB,CAA5B,EAA+B;AAC3BJ,MAAAA,QAAQ,CAACH,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAG,MAAAA,QAAQ,CAACd,cAAc,CAAC,WAAD,CAAf,CAAR;AACH,KAHD,MAGO;AACHE,MAAAA,oBAAoB,CAACe,GAAG,CAACJ,IAAL,EAAWC,QAAX,CAApB;AACH;AACJ,GARL,EASKK,KATL,CASYC,KAAD,IAAW;AACdjB,IAAAA,wBAAwB,CAACiB,KAAD,EAAQN,QAAR,CAAxB;AACH,GAXL;AAYH,CAdM;AAeP,OAAO,MAAMO,eAAe,GAAG,MAAOP,QAAD,IAAqC;AACtEA,EAAAA,QAAQ,CAACd,cAAc,CAAC,SAAD,CAAf,CAAR;AACAC,EAAAA,OAAO,CAACqB,MAAR,GACKN,IADL,CACUC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACJ,IAAJ,CAASK,UAAT,KAAwB,CAA5B,EAA+B;AAC3BJ,MAAAA,QAAQ,CAACH,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAG,MAAAA,QAAQ,CAACd,cAAc,CAAC,WAAD,CAAf,CAAR;AACH,KAHD,MAGO;AACHE,MAAAA,oBAAoB,CAACe,GAAG,CAACJ,IAAL,EAAWC,QAAX,CAApB;AACH;AACJ,GARL,EASKK,KATL,CASYC,KAAD,IAAW;AACdjB,IAAAA,wBAAwB,CAACiB,KAAD,EAAQN,QAAR,CAAxB;AACH,GAXL;AAYH,CAdM,C,CAmBP","sourcesContent":["import { Dispatch } from 'redux'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { authAPI, LoginParamsType } from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const initializeAppTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.authMe()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType"]},"metadata":{},"sourceType":"module"}