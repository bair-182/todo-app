{"ast":null,"code":"import { todolistsAPI } from '../../api/todolists-api';\nimport { setAppErrorAC, setAppStatusAC } from \"../../app/app-reducer\";\nconst initialState = {};\nexport const tasksReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'REMOVE-TASK':\n      return { ...state,\n        [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)\n      };\n\n    case 'ADD-TASK':\n      return { ...state,\n        [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\n      };\n\n    case 'UPDATE-TASK':\n      return { ...state,\n        [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? { ...t,\n          ...action.model\n        } : t)\n      };\n\n    case 'ADD-TODOLIST':\n      return { ...state,\n        [action.todolist.id]: []\n      };\n\n    case 'REMOVE-TODOLIST':\n      const copyState = { ...state\n      };\n      delete copyState[action.id];\n      return copyState;\n\n    case 'SET-TODOLISTS':\n      {\n        const copyState = { ...state\n        };\n        action.todolists.forEach(tl => {\n          copyState[tl.id] = [];\n        });\n        return copyState;\n      }\n\n    case 'SET-TASKS':\n      return { ...state,\n        [action.todolistId]: action.tasks\n      };\n\n    default:\n      return state;\n  }\n}; // actions\n\nexport const removeTaskAC = (taskId, todolistId) => ({\n  type: 'REMOVE-TASK',\n  taskId,\n  todolistId\n});\nexport const addTaskAC = task => ({\n  type: 'ADD-TASK',\n  task\n});\nexport const updateTaskAC = (taskId, model, todolistId) => ({\n  type: 'UPDATE-TASK',\n  model,\n  todolistId,\n  taskId\n});\nexport const setTasksAC = (tasks, todolistId) => ({\n  type: 'SET-TASKS',\n  tasks,\n  todolistId\n}); // thunks\n\nexport const fetchTasksTC = todolistId => dispatch => {\n  dispatch(setAppStatusAC('loading'));\n  todolistsAPI.getTasks(todolistId).then(res => {\n    const tasks = res.data.items;\n    const action = setTasksAC(tasks, todolistId);\n    dispatch(action);\n    dispatch(setAppStatusAC('succeeded'));\n  });\n};\nexport const removeTaskTC = (taskId, todolistId) => dispatch => {\n  dispatch(setAppStatusAC('loading'));\n  todolistsAPI.deleteTask(todolistId, taskId).then(res => {\n    const action = removeTaskAC(taskId, todolistId);\n    dispatch(action);\n    dispatch(setAppStatusAC('succeeded'));\n  });\n};\nexport const addTaskTC = (title, todolistId) => dispatch => {\n  dispatch(setAppStatusAC('loading'));\n  todolistsAPI.createTask(todolistId, title).then(res => {\n    if (res.data.resultCode === 0) {\n      const task = res.data.data.item;\n      const action = addTaskAC(task);\n      dispatch(action);\n      dispatch(setAppStatusAC('succeeded'));\n    } else {\n      if (res.data.messages.length) {\n        dispatch(setAppErrorAC(res.data.messages[0]));\n      } else {\n        dispatch(setAppErrorAC('Some error occured'));\n      } // dispatch(setAppErrorAC('failed!'))\n\n    }\n  });\n};\nexport const updateTaskTC = (taskId, domainModel, todolistId) => (dispatch, getState) => {\n  const state = getState();\n  const task = state.tasks[todolistId].find(t => t.id === taskId);\n\n  if (!task) {\n    //throw new Error(\"task not found in the state\");\n    console.warn('task not found in the state');\n    return;\n  }\n\n  const apiModel = {\n    deadline: task.deadline,\n    description: task.description,\n    priority: task.priority,\n    startDate: task.startDate,\n    title: task.title,\n    status: task.status,\n    ...domainModel\n  };\n  dispatch(setAppStatusAC('loading'));\n  todolistsAPI.updateTask(todolistId, taskId, apiModel).then(res => {\n    const action = updateTaskAC(taskId, domainModel, todolistId);\n    dispatch(action);\n    dispatch(setAppStatusAC('succeeded'));\n  });\n}; // types","map":{"version":3,"sources":["D:/it-incubator/REACT_TSX - Todolist15/src/features/TodolistsList/tasks-reducer.ts"],"names":["todolistsAPI","setAppErrorAC","setAppStatusAC","initialState","tasksReducer","state","action","type","todolistId","filter","t","id","taskId","task","todoListId","map","model","todolist","copyState","todolists","forEach","tl","tasks","removeTaskAC","addTaskAC","updateTaskAC","setTasksAC","fetchTasksTC","dispatch","getTasks","then","res","data","items","removeTaskTC","deleteTask","addTaskTC","title","createTask","resultCode","item","messages","length","updateTaskTC","domainModel","getState","find","console","warn","apiModel","deadline","description","priority","startDate","status","updateTask"],"mappings":"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","sourcesContent":["import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {AppActionsType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error occured'))\r\n                }\r\n                // dispatch(setAppErrorAC('failed!'))\r\n            }\r\n\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | AppActionsType\r\n\r\n"]},"metadata":{},"sourceType":"module"}