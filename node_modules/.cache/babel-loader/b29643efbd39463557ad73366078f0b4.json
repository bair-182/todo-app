{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blink\\\\Documents\\\\GitHub\\\\todolist\\\\src\\\\features\\\\Login\\\\Login.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { useFormik } from \"formik\";\nimport { loginTC } from \"./authReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Login = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(state => state.auth.isLoggedIn);\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: false\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.email) {\n        errors.email = 'Required';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n      }\n\n      if (!values.password) {\n        errors.password = \"Password is required\";\n      } else if (values.password.length < 3) {\n        errors.password = \"Password should be more than 3 symbols\";\n      }\n\n      return errors;\n    },\n    onSubmit: values => {\n      dispatch(loginTC(values));\n      formik.resetForm();\n    }\n  });\n\n  if (isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    justifyContent: 'center',\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      justifyContent: 'center',\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formik.handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"To log in get registered\", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: 'https://social-network.samuraijs.com/',\n                target: '_blank',\n                children: \" here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"or use common test account credentials:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Email: free@samuraijs.com\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Password: free\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Email\",\n              margin: \"normal\",\n              ...formik.getFieldProps('email')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 25\n            }, this), formik.touched.email && formik.errors.email && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: 'red'\n              },\n              children: formik.errors.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 73\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"password\",\n              label: \"Password\",\n              margin: \"normal\",\n              ...formik.getFieldProps('password')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 25\n            }, this), formik.touched.password && formik.errors.password && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: 'red'\n              },\n              children: formik.errors.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 79\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              label: 'Remember me',\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                name: \"rememberMe\",\n                onChange: formik.handleChange,\n                checked: formik.values.rememberMe\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 38\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: 'submit',\n              variant: 'contained',\n              color: 'primary',\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Login, \"7A0z6vT5KiyBZhLbHZ2OBpuVKng=\", false, function () {\n  return [useDispatch, useSelector, useFormik];\n});\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/blink/Documents/GitHub/todolist/src/features/Login/Login.tsx"],"names":["React","Grid","Checkbox","FormControl","FormControlLabel","FormGroup","FormLabel","TextField","Button","useFormik","loginTC","useDispatch","useSelector","Navigate","Login","dispatch","isLoggedIn","state","auth","formik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","resetForm","handleSubmit","getFieldProps","touched","color","handleChange"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = \"Password is required\"\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Password should be more than 3 symbols\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit} >\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div> }\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                name=\"rememberMe\"\r\n                                onChange={ formik.handleChange }\r\n                                checked={ formik.values.rememberMe }\r\n                            />}/>\r\n                        <Button\r\n                            type={'submit'}\r\n                            variant={'contained'}\r\n                            color={'primary'}\r\n                        >\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n\r\n                </FormControl>\r\n            </form>\r\n\r\n        </Grid>\r\n    </Grid>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}