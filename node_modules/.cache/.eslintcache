[{"D:\\it-incubator\\REACT_TSX - Todolist15\\src\\index.tsx":"1","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\reportWebVitals.ts":"2","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\app\\store.ts":"3","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\app\\App.tsx":"4","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\features\\TodolistsList\\tasks-reducer.ts":"5","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\features\\TodolistsList\\todolists-reducer.ts":"6","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\features\\TodolistsList\\TodolistsList.tsx":"7","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\api\\todolists-api.ts":"8","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"9","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\components\\AddItemForm\\AddItemForm.tsx":"10","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"11","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\components\\EditableSpan\\EditableSpan.tsx":"12","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\app\\app-reducer.ts":"13","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"14","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\utils\\error-utils.ts":"15","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\features\\Login\\Login.tsx":"16","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\features\\Login\\authReducer.ts":"17","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\index.tsx":"18","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\reportWebVitals.ts":"19","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\app\\store.ts":"20","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\app\\App.tsx":"21","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\app\\app-reducer.ts":"22","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\features\\TodolistsList\\tasks-reducer.ts":"23","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\features\\TodolistsList\\todolists-reducer.ts":"24","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\features\\Login\\authReducer.ts":"25","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\features\\TodolistsList\\TodolistsList.tsx":"26","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\features\\Login\\Login.tsx":"27","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"28","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\api\\todolists-api.ts":"29","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\utils\\error-utils.ts":"30","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"31","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\components\\AddItemForm\\AddItemForm.tsx":"32","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"33","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\components\\EditableSpan\\EditableSpan.tsx":"34"},{"size":753,"mtime":1650555468787,"results":"35","hashOfConfig":"36"},{"size":425,"mtime":1607869388000,"results":"37","hashOfConfig":"36"},{"size":1189,"mtime":1650562305992,"results":"38","hashOfConfig":"36"},{"size":2845,"mtime":1657440063551,"results":"39","hashOfConfig":"36"},{"size":5769,"mtime":1650564116420,"results":"40","hashOfConfig":"36"},{"size":4586,"mtime":1633248204000,"results":"41","hashOfConfig":"36"},{"size":4074,"mtime":1650564451439,"results":"42","hashOfConfig":"36"},{"size":3212,"mtime":1650568642719,"results":"43","hashOfConfig":"36"},{"size":4255,"mtime":1633243592000,"results":"44","hashOfConfig":"36"},{"size":1618,"mtime":1633243268000,"results":"45","hashOfConfig":"36"},{"size":1821,"mtime":1633243592000,"results":"46","hashOfConfig":"36"},{"size":954,"mtime":1633243268000,"results":"47","hashOfConfig":"36"},{"size":2581,"mtime":1651336895531,"results":"48","hashOfConfig":"36"},{"size":1115,"mtime":1633243592000,"results":"49","hashOfConfig":"36"},{"size":811,"mtime":1596719330000,"results":"50","hashOfConfig":"36"},{"size":4082,"mtime":1650563822789,"results":"51","hashOfConfig":"36"},{"size":2036,"mtime":1657366964522,"results":"52","hashOfConfig":"36"},{"size":752,"mtime":1663937328652,"results":"53","hashOfConfig":"54"},{"size":425,"mtime":1607869388000,"results":"55","hashOfConfig":"54"},{"size":709,"mtime":1663931739364,"results":"56","hashOfConfig":"54"},{"size":2853,"mtime":1663931820487,"results":"57","hashOfConfig":"54"},{"size":2342,"mtime":1663931739360,"results":"58","hashOfConfig":"54"},{"size":5769,"mtime":1650564116420,"results":"59","hashOfConfig":"54"},{"size":4167,"mtime":1663931739353,"results":"60","hashOfConfig":"54"},{"size":2213,"mtime":1663938466586,"results":"61","hashOfConfig":"54"},{"size":4138,"mtime":1663931739369,"results":"62","hashOfConfig":"54"},{"size":4082,"mtime":1650563822789,"results":"63","hashOfConfig":"54"},{"size":1115,"mtime":1633243592000,"results":"64","hashOfConfig":"54"},{"size":3212,"mtime":1650568642719,"results":"65","hashOfConfig":"54"},{"size":811,"mtime":1596719330000,"results":"66","hashOfConfig":"54"},{"size":4255,"mtime":1633243592000,"results":"67","hashOfConfig":"54"},{"size":1618,"mtime":1633243268000,"results":"68","hashOfConfig":"54"},{"size":1821,"mtime":1633243592000,"results":"69","hashOfConfig":"54"},{"size":954,"mtime":1633243268000,"results":"70","hashOfConfig":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yr22kw",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"1hkognl",{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"112"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"112"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"112"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"112"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"D:\\it-incubator\\REACT_TSX - Todolist15\\src\\index.tsx",[],"D:\\it-incubator\\REACT_TSX - Todolist15\\src\\reportWebVitals.ts",[],"D:\\it-incubator\\REACT_TSX - Todolist15\\src\\app\\store.ts",[],"D:\\it-incubator\\REACT_TSX - Todolist15\\src\\app\\App.tsx",["146"],"import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Login/authReducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const dispatch = useDispatch();\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=>state.auth.isLoggedIn)\r\n\r\n    useEffect(()=>{\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const logoutTCHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"error\" onClick={logoutTCHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={\"/\"} element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path={\"login\"} element={<Login/>}/>\r\n                    <Route path={\"404\"} element={ <h1 style={{ textAlign:\"center\" }}>404: PAGE NOT FOUND</h1> }/>\r\n                    <Route path={\"*\"} element={ <Navigate to=\"/404\" /> }/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\features\\TodolistsList\\tasks-reducer.ts",[],"D:\\it-incubator\\REACT_TSX - Todolist15\\src\\features\\TodolistsList\\todolists-reducer.ts",[],"D:\\it-incubator\\REACT_TSX - Todolist15\\src\\features\\TodolistsList\\TodolistsList.tsx",["147","148","149","150","151","152","153","154"],"import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\api\\todolists-api.ts",[],"D:\\it-incubator\\REACT_TSX - Todolist15\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["155","156","157","158","159","160"],"import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\components\\AddItemForm\\AddItemForm.tsx",[],"D:\\it-incubator\\REACT_TSX - Todolist15\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["161","162","163"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\it-incubator\\REACT_TSX - Todolist15\\src\\app\\app-reducer.ts",[],"D:\\it-incubator\\REACT_TSX - Todolist15\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"D:\\it-incubator\\REACT_TSX - Todolist15\\src\\utils\\error-utils.ts",[],"D:\\it-incubator\\REACT_TSX - Todolist15\\src\\features\\Login\\Login.tsx",["164"],"import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = \"Password is required\"\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Password should be more than 3 symbols\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit} >\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div> }\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                name=\"rememberMe\"\r\n                                onChange={ formik.handleChange }\r\n                                checked={ formik.values.rememberMe }\r\n                            />}/>\r\n                        <Button\r\n                            type={'submit'}\r\n                            variant={'contained'}\r\n                            color={'primary'}\r\n                        >\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n\r\n                </FormControl>\r\n            </form>\r\n\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","D:\\it-incubator\\REACT_TSX - Todolist15\\src\\features\\Login\\authReducer.ts",[],"C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\index.tsx",[],["165","166"],"C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\reportWebVitals.ts",[],"C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\app\\store.ts",[],"C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\app\\App.tsx",[],"C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\app\\app-reducer.ts",[],"C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\features\\TodolistsList\\tasks-reducer.ts",[],"C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\features\\TodolistsList\\todolists-reducer.ts",[],"C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\features\\Login\\authReducer.ts",[],"C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\features\\TodolistsList\\TodolistsList.tsx",["167"],"import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\features\\Login\\Login.tsx",["168"],"C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\api\\todolists-api.ts",[],"C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\utils\\error-utils.ts",[],"C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["169","170","171","172","173","174"],"C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\components\\AddItemForm\\AddItemForm.tsx",[],"C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["175","176","177"],"C:\\Users\\blink\\Documents\\GitHub\\todolist\\src\\components\\EditableSpan\\EditableSpan.tsx",[],{"ruleId":"178","severity":1,"message":"179","line":34,"column":7,"nodeType":"180","endLine":34,"endColumn":9,"suggestions":"181"},{"ruleId":"178","severity":1,"message":"182","line":39,"column":8,"nodeType":"180","endLine":39,"endColumn":10,"suggestions":"183"},{"ruleId":"178","severity":1,"message":"184","line":44,"column":8,"nodeType":"180","endLine":44,"endColumn":10,"suggestions":"185"},{"ruleId":"178","severity":1,"message":"184","line":49,"column":8,"nodeType":"180","endLine":49,"endColumn":10,"suggestions":"186"},{"ruleId":"178","severity":1,"message":"184","line":54,"column":8,"nodeType":"180","endLine":54,"endColumn":10,"suggestions":"187"},{"ruleId":"178","severity":1,"message":"184","line":59,"column":8,"nodeType":"180","endLine":59,"endColumn":10,"suggestions":"188"},{"ruleId":"178","severity":1,"message":"184","line":64,"column":8,"nodeType":"180","endLine":64,"endColumn":10,"suggestions":"189"},{"ruleId":"178","severity":1,"message":"184","line":69,"column":8,"nodeType":"180","endLine":69,"endColumn":10,"suggestions":"190"},{"ruleId":"178","severity":1,"message":"184","line":74,"column":8,"nodeType":"180","endLine":74,"endColumn":10,"suggestions":"191"},{"ruleId":"178","severity":1,"message":"192","line":36,"column":8,"nodeType":"180","endLine":36,"endColumn":10,"suggestions":"193"},{"ruleId":"178","severity":1,"message":"194","line":40,"column":8,"nodeType":"180","endLine":40,"endColumn":42,"suggestions":"195"},{"ruleId":"178","severity":1,"message":"194","line":47,"column":8,"nodeType":"180","endLine":47,"endColumn":54,"suggestions":"196"},{"ruleId":"178","severity":1,"message":"194","line":49,"column":95,"nodeType":"180","endLine":49,"endColumn":134,"suggestions":"197"},{"ruleId":"178","severity":1,"message":"194","line":50,"column":101,"nodeType":"180","endLine":50,"endColumn":140,"suggestions":"198"},{"ruleId":"178","severity":1,"message":"194","line":51,"column":107,"nodeType":"180","endLine":51,"endColumn":146,"suggestions":"199"},{"ruleId":"178","severity":1,"message":"194","line":16,"column":97,"nodeType":"180","endLine":16,"endColumn":130,"suggestions":"200"},{"ruleId":"178","severity":1,"message":"194","line":21,"column":8,"nodeType":"180","endLine":21,"endColumn":41,"suggestions":"201"},{"ruleId":"178","severity":1,"message":"194","line":25,"column":8,"nodeType":"180","endLine":25,"endColumn":41,"suggestions":"202"},{"ruleId":"203","severity":1,"message":"204","line":66,"column":29,"nodeType":"205","endLine":67,"endColumn":50},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"178","severity":1,"message":"210","line":39,"column":8,"nodeType":"180","endLine":39,"endColumn":18,"suggestions":"211"},{"ruleId":"203","severity":1,"message":"204","line":66,"column":29,"nodeType":"205","endLine":67,"endColumn":50},{"ruleId":"178","severity":1,"message":"192","line":36,"column":8,"nodeType":"180","endLine":36,"endColumn":10,"suggestions":"212"},{"ruleId":"178","severity":1,"message":"194","line":40,"column":8,"nodeType":"180","endLine":40,"endColumn":42,"suggestions":"213"},{"ruleId":"178","severity":1,"message":"194","line":47,"column":8,"nodeType":"180","endLine":47,"endColumn":54,"suggestions":"214"},{"ruleId":"178","severity":1,"message":"194","line":49,"column":95,"nodeType":"180","endLine":49,"endColumn":134,"suggestions":"215"},{"ruleId":"178","severity":1,"message":"194","line":50,"column":101,"nodeType":"180","endLine":50,"endColumn":140,"suggestions":"216"},{"ruleId":"178","severity":1,"message":"194","line":51,"column":107,"nodeType":"180","endLine":51,"endColumn":146,"suggestions":"217"},{"ruleId":"178","severity":1,"message":"194","line":16,"column":97,"nodeType":"180","endLine":16,"endColumn":130,"suggestions":"218"},{"ruleId":"178","severity":1,"message":"194","line":21,"column":8,"nodeType":"180","endLine":21,"endColumn":41,"suggestions":"219"},{"ruleId":"178","severity":1,"message":"194","line":25,"column":8,"nodeType":"180","endLine":25,"endColumn":41,"suggestions":"220"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["221"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isLoggedIn'. Either include them or remove the dependency array.",["222"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["223"],["224"],["225"],["226"],["227"],["228"],["229"],"React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["230"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["231"],["232"],["233"],["234"],["235"],["236"],["237"],["238"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-native-reassign",["239"],"no-negated-in-lhs",["240"],"React Hook useEffect has a missing dependency: 'isLoggedIn'. Either include it or remove the dependency array.",["241"],["242"],["243"],["244"],["245"],["246"],["247"],["248"],["249"],["250"],{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"251","fix":"255"},{"desc":"251","fix":"256"},{"desc":"251","fix":"257"},{"desc":"251","fix":"258"},{"desc":"251","fix":"259"},{"desc":"251","fix":"260"},{"desc":"251","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"264","fix":"266"},{"desc":"264","fix":"267"},{"desc":"264","fix":"268"},{"desc":"264","fix":"269"},{"desc":"264","fix":"270"},{"desc":"264","fix":"271"},{"desc":"264","fix":"272"},"no-global-assign","no-unsafe-negation",{"desc":"253","fix":"273"},{"desc":"262","fix":"274"},{"desc":"264","fix":"275"},{"desc":"264","fix":"276"},{"desc":"264","fix":"277"},{"desc":"264","fix":"278"},{"desc":"264","fix":"279"},{"desc":"264","fix":"280"},{"desc":"264","fix":"281"},{"desc":"264","fix":"282"},"Update the dependencies array to be: [dispatch]",{"range":"283","text":"284"},"Update the dependencies array to be: [dispatch, isLoggedIn]",{"range":"285","text":"286"},{"range":"287","text":"284"},{"range":"288","text":"284"},{"range":"289","text":"284"},{"range":"290","text":"284"},{"range":"291","text":"284"},{"range":"292","text":"284"},{"range":"293","text":"284"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"294","text":"295"},"Update the dependencies array to be: [props]",{"range":"296","text":"297"},{"range":"298","text":"297"},{"range":"299","text":"297"},{"range":"300","text":"297"},{"range":"301","text":"297"},{"range":"302","text":"297"},{"range":"303","text":"297"},{"range":"304","text":"297"},{"range":"305","text":"286"},{"range":"306","text":"295"},{"range":"307","text":"297"},{"range":"308","text":"297"},{"range":"309","text":"297"},{"range":"310","text":"297"},{"range":"311","text":"297"},{"range":"312","text":"297"},{"range":"313","text":"297"},{"range":"314","text":"297"},[1456,1458],"[dispatch]",[1371,1373],"[dispatch, isLoggedIn]",[1542,1544],[1713,1715],[1918,1920],[2131,2133],[2332,2334],[2479,2481],[2658,2660],[1526,1528],"[demo, dispatch, props.todolist.id]",[1643,1677],"[props]",[1908,1954],[2053,2092],[2195,2234],[2343,2382],[813,846],[1119,1152],[1309,1342],[1371,1381],[1526,1528],[1643,1677],[1908,1954],[2053,2092],[2195,2234],[2343,2382],[813,846],[1119,1152],[1309,1342]]